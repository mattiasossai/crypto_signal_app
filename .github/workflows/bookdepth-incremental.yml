name: "5️⃣📥🛠️ bookDepth Inc. Download & Feat."

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Startdatum (YYYY-MM-DD)'
        required: true
      end_date:
        description: 'Enddatum (YYYY-MM-DD)'
        required: true
  schedule:
    - cron: '40 8 * * *'  # täglich 08:40 UTC

jobs:
  download-and-feature:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        symbol: [BTCUSDT, ETHUSDT, BNBUSDT, SOLUSDT, XRPUSDT, ENAUSDT]
      max-parallel: 1

    steps:
      # 1) Checkout + Rebase, damit wir immer clean sind
      - name: Checkout & sync
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Sync remote main
        run: git pull --rebase origin main

      # 2) Python-Setup
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install --upgrade pandas pyarrow scipy

      # 3) Mach die Skripte ausführbar
      - name: Make scripts executable
        run: |
          chmod +x extract_bookDepth_features.py
          chmod +x scripts/append_bookDepth.py

      # 4) Termine berechnen
      - name: Calc dates
        id: dates
        run: |
          echo "global_start=2025-01-01"       >> $GITHUB_OUTPUT
          echo "today=$(date -I -d 'yesterday')" >> $GITHUB_OUTPUT

      # 5) Resume-Logik
      - name: Determine resume point
        id: resume
        run: |
          SYMBOL=${{ matrix.symbol }}
          DIR=features/bookDepth/${SYMBOL}
          mkdir -p "$DIR"
          OLD=$(ls $DIR/${SYMBOL}-features-*.parquet 2>/dev/null | sort | tail -n1 || true)

          if [[ -n "$OLD" ]]; then
            PREV_END=$(basename "$OLD" .parquet | sed -E 's/^.*_to_([0-9\-]+)$/\1/')
            echo "mode=append" >> $GITHUB_OUTPUT
            echo "start=$(date -I -d \"$PREV_END + 1 day\")" >> $GITHUB_OUTPUT
          else
            echo "mode=fresh" >> $GITHUB_OUTPUT
            echo "start=${{ steps.dates.outputs.global_start }}" >> $GITHUB_OUTPUT
          fi
          echo "end=${{ steps.dates.outputs.today }}" >> $GITHUB_OUTPUT

      # 6) Download
      - name: Download & unzip bookDepth
        run: |
          SYMBOL=${{ matrix.symbol }}
          SD=${{ steps.resume.outputs.start }}
          ED=${{ steps.resume.outputs.end }}
          case "$SYMBOL" in
            BTCUSDT|ETHUSDT|BNBUSDT|SOLUSDT) INC="2023-01-01";;
            XRPUSDT)                           INC="2023-01-06";;
            ENAUSDT)                           INC="2024-04-02";;
            *)                                 INC=$SD ;;
          esac
          [[ "$(date -d"$SD" +%s)" -lt "$(date -d"$INC" +%s)" ]] && SD="$INC"
          mkdir -p raw/bookDepth/"$SYMBOL"
          CUR="$SD"
          while [[ "$CUR" < "$ED" || "$CUR" == "$ED" ]]; do
            ZIP="${SYMBOL}-bookDepth-${CUR}.zip"
            if curl -sSf "https://data.binance.vision/data/futures/um/daily/bookDepth/$SYMBOL/$ZIP" -o "$ZIP"; then
              unzip -q -o "$ZIP" -d raw/bookDepth/"$SYMBOL"
            fi
            rm -f "$ZIP"
            CUR=$(date -I -d "$CUR +1 day")
          done

      # 7) Feature-Extraction **und** Append
      - name: Extract & Append
        run: |
          SYMBOL=${{ matrix.symbol }}
          GS=${{ steps.dates.outputs.global_start }}
          NE=${{ steps.resume.outputs.end }}
          DIR=features/bookDepth/${SYMBOL}
          OUT="${DIR}/${SYMBOL}-features-${GS}_to_${NE}.parquet"
          mkdir -p "$DIR"

          # tmp-Datei zzgl. Append-Logik im Skript
          TMP="${DIR}/tmp_${SYMBOL}.parquet"

          # 7a) neu berechnen
          python3 extract_bookDepth_features.py \
            --input-dir raw/bookDepth/${SYMBOL} \
            --start-date "${{ steps.resume.outputs.start }}" \
            --end-date   "${{ steps.resume.outputs.end }}" \
            --output-file "$TMP"

          # 7b) append oder fresh
          if [[ "${{ steps.resume.outputs.mode }}" == "append" ]]; then
            python3 scripts/append_bookDepth.py \
              "$(ls $DIR/${SYMBOL}-features-*.parquet | sort | tail -n1)" \
              "$TMP" \
              "$OUT"
          else
            mv "$TMP" "$OUT"
          fi

          # aufräumen
          rm -f raw/bookDepth/${SYMBOL}/*.csv
          rm -f "$TMP"

      # 8) Commit & Push
      - name: Commit & Push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add features/bookDepth/${{ matrix.symbol }}
          if git diff --cached --quiet; then
            echo "✔️ No changes"
          else
            git commit -m "♻️ ${{ matrix.symbol }} bookDepth-Features ${{ steps.dates.outputs.global_start }} to ${{ steps.resume.outputs.end }}"
            git push origin HEAD:main
          fi
