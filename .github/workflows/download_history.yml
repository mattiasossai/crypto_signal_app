name: üì• Download & Commit Candlestick History CSVs

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - 'historical/**'

jobs:
  download:
    name: üì¶ ${{ matrix.symbol }}ÔΩú${{ matrix.interval }}ÔΩú${{ matrix.part }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        symbol:   [BTCUSDT, ETHUSDT, BNBUSDT, XRPUSDT, SOLUSDT, ENAUSDT]
        interval: [1m, 5m, 15m, 1h, 4h]
        part:     [part1, part2]

    steps:
      - name: üîÑ Checkout repository (full history)
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0             # ‚Üê Hier holen wir alles

      - name: ‚öôÔ∏è  Skript ausf√ºhrbar machen
        run: chmod +x train/download_data_range.sh

      - name: üìÖ Berechne Datumsspanne
        id: dates
        run: |
          if [[ "${{ matrix.part }}" == "part1" ]]; then
            START=2020-01-01
            END=2022-01-01
          else
            START=2022-01-01
            END=$(date -I -d "yesterday")
          fi
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=  $END"   >> $GITHUB_OUTPUT

      - name: üåê Download ZIPs
        run: |
          OUT=historical/${{ matrix.symbol }}/${{ matrix.interval }}/${{ matrix.part }}
          mkdir -p "$OUT"
          ./train/download_data_range.sh \
            "${{ matrix.symbol }}" \
            "${{ matrix.interval }}" \
            "${{ steps.dates.outputs.start }}" \
            "${{ steps.dates.outputs.end }}" \
            "$OUT"

      - name: üìÇ Entpacke & Cleanup
        run: |
          DIR=historical/${{ matrix.symbol }}/${{ matrix.interval }}/${{ matrix.part }}
          for z in "$DIR"/*.zip; do
            unzip -q "$z" -d "$DIR"
            rm -f   "$z"
          done

      - name: üìù Commit & Push CSVs
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Alle neuen CSVs vormerken
          git add historical/${{ matrix.symbol }}/${{ matrix.interval }}/${{ matrix.part }}/*.csv

          # Wenn es etwas zum Committen gibt:
          if ! git diff --cached --quiet; then
            git commit -m "feat(history): add ${{ matrix.symbol }} ${{ matrix.interval }} ${{ matrix.part }} CSVs up to $(date -I) [skip ci]"

            # Rebase auf aktuelle Main
            git pull --rebase origin main

            # Dann pushe
            git push origin HEAD:main
          else
            echo "Keine neuen CSVs zum Committen."
          fi
