name: 🔄 Download & Commit Historical Klines

on:
  workflow_dispatch:
  schedule:
    # täglich 08:00 UTC
    - cron: '0 8 * * *'

jobs:
  download_matrix:
    name: Download History ${{ matrix.symbol }} @ ${{ matrix.interval }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        symbol: [BTCUSDT, ETHUSDT, BNBUSDT, SOLUSDT, XRPUSDT, ENAUSDT]
        interval: [1m, 5m, 15m, 1h, 4h]
      max-parallel: 30

    env:
      # Wir schreiben das Backfill‐END ins Environment, um es im Upload‐Step zu nutzen
      END: ${{ steps.dates.outputs.END }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install unzip (für funzip)
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Determine Backfill Date Range
        id: dates
        shell: bash
        run: |
          YESTERDAY=$(date -d "yesterday" '+%Y-%m-%d')
          DIR="historical/historical-${{ matrix.symbol }}-${{ matrix.interval }}"
          if compgen -G "$DIR/${{ matrix.symbol }}-${{ matrix.interval }}-*.csv" > /dev/null; then
            LAST=$(find "$DIR" -type f \
              -name "${{ matrix.symbol }}-${{ matrix.interval }}-*.csv" \
              | sed -E "s/.*${{ matrix.symbol }}-${{ matrix.interval }}-([0-9]{4}-[0-9]{2}-[0-9]{2})\.csv/\1/" \
              | sort | tail -n1)
            START=$(date -d "$LAST +1 day" '+%Y-%m-%d')
          else
            START="$YESTERDAY"
          fi
          END="$YESTERDAY"
          echo "START=$START" >> $GITHUB_ENV
          echo "END=$END"     >> $GITHUB_ENV
          echo "::set-output name=END::$END"

      - name: Download History Range
        shell: bash
        run: |
          chmod +x historical/download_history_range.sh
          historical/download_history_range.sh \
            "${{ matrix.symbol }}" \
            "${{ matrix.interval }}" \
            "$START" \
            "$END"

      - name: Upload only yesterday’s CSV
        uses: actions/upload-artifact@v4
        with:
          name: historical-${{ matrix.symbol }}-${{ matrix.interval }}
          path: |
            historical/historical-${{ matrix.symbol }}-${{ matrix.interval }}/${{ matrix.symbol }}-${{ matrix.interval }}-${{ env.END }}.csv
          if-no-files-found: ignore

  aggregate_and_push:
    name: Aggregate & Push All Historical
    needs: download_matrix
    runs-on: ubuntu-latest

    steps:
      - name: Checkout fresh
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Download all historical artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./historical-artifacts

      - name: Merge new CSVs into repo
        shell: bash
        run: |
          mkdir -p historical
          find historical-artifacts -type f | while read src; do
            rel=${src#historical-artifacts/}           # etwa: historical-BTCUSDT-1h/BTCUSDT-1h-2025-05-18.csv
            dst="historical/${rel}"
            mkdir -p "$(dirname "$dst")"
            mv "$src" "$dst"
            echo " ➕ $dst"
          done

      - name: Commit & Push
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git reset --mixed origin/main
          git add historical
          if ! git diff --cached --quiet; then
            git commit -m "chore(history): import ${END} [skip ci]"
            git push origin HEAD:main
          else
            echo " No changes to push"
          fi
