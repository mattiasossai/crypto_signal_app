name: 1Ô∏è‚É£üïØÔ∏è Download & Commit Historical Klines

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'  # t√§glich 08:00 UTC

jobs:
  download_matrix:
    name: Download History ${{ matrix.symbol }} @ ${{ matrix.interval }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        symbol: [BTCUSDT, ETHUSDT, BNBUSDT, SOLUSDT, XRPUSDT, ENAUSDT]
        interval: [1m, 5m, 15m, 1h, 4h]
      max-parallel: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Determine date range
        id: dates
        shell: bash
        run: |
          YESTERDAY=$(date -d "yesterday" '+%Y-%m-%d')

          # existiert schon eine CSV f√ºr gestern?
          if [[ -f raw/klines/${{ matrix.symbol }}/${{ matrix.symbol }}-${{ matrix.interval }}-$YESTERDAY.csv ]]; then
            START=$YESTERDAY
          else
            LAST=$(find raw/klines/${{ matrix.symbol }} -type f \
              -name "${{ matrix.symbol }}-${{ matrix.interval }}-*.csv" \
              | sed -E "s/.*-([0-9]{4}-[0-9]{2}-[0-9]{2})\.csv/\1/" \
              | sort | tail -n1)
            if [[ -z "$LAST" ]]; then
              START=$YESTERDAY
            else
              START=$(date -I -d "$LAST +1 day")
            fi
          fi

          END=$YESTERDAY

          # neuer Standard: schreibe Outputs via GITHUB_OUTPUT
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=$END"     >> $GITHUB_OUTPUT

      - name: Download Range
        shell: bash
        run: |
          SYMBOL=${{ matrix.symbol }}
          INTERVAL=${{ matrix.interval }}
          START=${{ steps.dates.outputs.start }}
          END=${{ steps.dates.outputs.end }}

          echo "‚Üí Downloading ${SYMBOL}-${INTERVAL} from $START to $END"
          mkdir -p raw/klines/$SYMBOL

          CUR="$START"
          while [[ "$CUR" < "$END" || "$CUR" == "$END" ]]; do
            ZIP="${SYMBOL}-${INTERVAL}-${CUR}.zip"
            OUT="raw/klines/${SYMBOL}/${SYMBOL}-${INTERVAL}-${CUR}.csv"
            if [[ -f "$OUT" ]]; then
              echo "‚úîÔ∏è  Skip existing $OUT"
            else
              URL="https://data.binance.vision/data/futures/um/daily/klines/${SYMBOL}/${INTERVAL}/${ZIP}"
              echo "‚Üí Fetching $ZIP"
              if curl -sSf "$URL" | funzip > "$OUT"; then
                echo " ‚úÖ Saved $OUT"
              else
                echo " ‚ö†Ô∏è Missing or error: $URL"
                rm -f "$OUT"
              fi
            fi
            CUR=$(date -I -d "$CUR +1 day")
          done

      - name: Upload artifact for yesterday
        uses: actions/upload-artifact@v4
        with:
          name: historical-${{ matrix.symbol }}-${{ matrix.interval }}
          path: raw/klines/${{ matrix.symbol }}/*-${{ steps.dates.outputs.end }}.csv
          if-no-files-found: ignore

  aggregate_and_push:
    name: Aggregate & Push All Historical
    needs: download_matrix
    runs-on: ubuntu-latest

    steps:
      - name: Checkout fresh
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Cleanup legacy historical-* dirs
        run: rm -rf raw/klines/historical-*

      - name: Download all historical-artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./historical-artifacts

      - name: Merge new CSVs into raw/klines
        shell: bash
        run: |
          mkdir -p raw/klines
          find historical-artifacts -type f | while read SRC; do
            # SRC = historical-artifacts/<symbol>/<file.csv>
            SYMBOL=$(basename $(dirname "$SRC"))
            DST="raw/klines/${SYMBOL}/$(basename "$SRC")"
            mkdir -p "$(dirname "$DST")"
            mv "$SRC" "$DST"
            echo " ‚ûï $DST"
          done

      - name: Commit & Push
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git reset --mixed origin/main
          git add raw/klines
          if ! git diff --cached --quiet; then
            git commit -m "chore(history): import ${END} [skip ci]"
            git push origin HEAD:main
          else
            echo "‚úîÔ∏è No new Klines to push"
          fi
