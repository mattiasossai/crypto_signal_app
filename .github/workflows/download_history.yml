name: 📥 Download & Commit Historical Data

on:
  workflow_dispatch:

jobs:
  # ─────────────────────────────────────────────────────────────────────────────
  # 1. Download-Matrix (Fan-Out): holt die letzten 30 Tage History pro Symbol/Interval
  # ─────────────────────────────────────────────────────────────────────────────
  download_matrix:
    name: 🔄 Download History ${{ matrix.symbol }} @ ${{ matrix.interval }} (Last 30d)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        symbol: [BTCUSDT, ETHUSDT, BNBUSDT, SOLUSDT, XRPUSDT, ENAUSDT]
        interval: [1h]    # bei Bedarf weitere Intervalle hinzufügen
      max-parallel: 6

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install unzip (für funzip)
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Download History Range
        shell: bash
        run: |
          chmod +x historical/download_history_range.sh
          START=$(date -I -d "yesterday - 29 days")   # 30 Tage zurück
          END=$(date -I -d "yesterday")               # bis gestern (exklusiv heute)
          historical/download_history_range.sh \
            "${{ matrix.symbol }}" \
            "${{ matrix.interval }}" \
            "$START" \
            "$END"

      - name: Upload Historical Artifact
        uses: actions/upload-artifact@v4
        with:
          name: historical-${{ matrix.symbol }}-${{ matrix.interval }}
          path: |
            historical/${{ matrix.symbol }}/${{ matrix.interval }}/*.csv
          if-no-files-found: ignore

  # ─────────────────────────────────────────────────────────────────────────────
  # 2. Aggregator & Commit (Fan-In): merged alle neuen Files ins Repo und pusht
  # ─────────────────────────────────────────────────────────────────────────────
  aggregate_and_push:
    name: 📦 Aggregate & Push Historical Data
    runs-on: ubuntu-latest
    needs: download_matrix

    env:
      GIT_USER: github-actions[bot]
      GIT_EMAIL: github-actions[bot]@users.noreply.github.com

    steps:
      - name: Checkout fresh
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Download all historical-artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./historical-artifacts

      - name: Merge new CSVs
        shell: bash
        run: |
          # Alle CSVs aus den Artifacts durchgehen
          find historical-artifacts -type f -name '*.csv' | while read src; do
            # Beispiel src: historical-artifacts/historical/BTCUSDT/1h/BTCUSDT-1h-2025-04-08.csv
            rel=${src#historical-artifacts/}      # historical/BTCUSDT/1h/... 
            dst=$rel                              # Ziel im Repo
            if [ ! -f "$dst" ]; then
              mkdir -p "$(dirname "$dst")"
              mv "$src" "$dst"
              echo "➕ Added $dst"
            else
              echo "✔️ Skipping existing $dst"
            fi
          done

      - name: Commit & Push
        shell: bash
        run: |
          git config user.name "${GIT_USER}"
          git config user.email "${GIT_EMAIL}"
          git fetch origin main
          git reset --mixed origin/main
          git add historical
          if ! git diff --cached --quiet; then
            git commit -m "chore(historical): add last 30 days data [skip ci]"
            git push origin HEAD:main
          else
            echo "🚀 No new historical data to commit"
          fi
