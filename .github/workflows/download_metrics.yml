name: üìä Download 4yr Metrics (6 Jobs)

on:
  workflow_dispatch:

jobs:
  download:
    name: üîÑ ${{ matrix.metric }} ‚û°Ô∏è ${{ matrix.part }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      max-parallel: 1               # ‚¨ÖÔ∏è zwingend sequentiell
      matrix:
        metric: 
          - open_interest
          - funding_rate
          - liquidity
        part:
          - part1
          - part2

    steps:
      - name: üîÄ Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Configure Git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: üåê Set WORKER_URL
        run: echo "WORKER_URL=${{ secrets.METRICS_WORKER_URL }}" >> $GITHUB_ENV

      - name: üîß Make script executable
        run: chmod +x metrics/download_metrics_range.sh

      - name: üìÖ Compute date range for ${{ matrix.part }}
        id: dates
        run: |
          if [[ "${{ matrix.part }}" == "part1" ]]; then
            START="2020-01-01"
            END="2022-01-01"
          else
            START="2022-01-01"
            END=$(date -I -d "yesterday")
          fi
          echo "start=$START" >> $GITHUB_OUTPUT
          echo "end=$END"   >> $GITHUB_OUTPUT

      - name: üîÑ Download metrics JSONs
        run: |
          metrics/download_metrics_range.sh \
            "${{ matrix.metric }}" \
            "${{ steps.dates.outputs.start }}" \
            "${{ steps.dates.outputs.end }}" \
            "${{ matrix.part }}"

      - name: ‚úÖ Test sample JSON for errors
        run: |
          DIR="metrics/${{ matrix.part }}/${{ matrix.metric }}"
          FIRST_JSON=$(ls "$DIR"/*.json | head -n1)
          if jq -e '.error' "$FIRST_JSON" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è API returned error in $FIRST_JSON ‚Äì bitte WORKER_URL pr√ºfen!"
            exit 1
          else
            echo "‚úÖ Sample JSON OK: $(basename "$FIRST_JSON")"
          fi

      - name: üîÑ Commit & Push JSON into repo
        run: |
          git stash push --include-untracked -m "pre-pull stash"
          git fetch origin main
          git rebase origin/main
          git stash pop

          git add -A metrics/${{ matrix.part }}/${{ matrix.metric }}

          if ! git diff --cached --quiet; then
            git commit -m "feat(metrics): add ${{ matrix.metric }} part=${{ matrix.part }} up to $(date -I) [skip ci]"
            git push origin HEAD:main
          else
            echo "‚Üí No new metrics for ${{ matrix.metric }} / ${{ matrix.part }}"
          fi
