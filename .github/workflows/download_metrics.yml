name: üìä Download 4yr Metrics (6 Jobs)

on:
  workflow_dispatch:

jobs:
  download:
    name: üîÑ ${{ matrix.metric }} ‚û°Ô∏è ${{ matrix.part }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        metric:
          - open_interest
          - funding_rate
          - liquidity
        part:
          - part1
          - part2

    steps:
      - name: üîÄ Checkout repository (full history)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üåê Set WORKER_URL
        run: echo "WORKER_URL=${{ secrets.METRICS_WORKER_URL }}" >> $GITHUB_ENV

      - name: üõ† Make script executable
        run: chmod +x metrics/download_metrics_range.sh

      - name: üìÖ Compute date range for ${{ matrix.part }}
        id: dates
        run: |
          if [[ "${{ matrix.part }}" == "part1" ]]; then
            echo "START=2020-01-01" >> $GITHUB_ENV
            echo "END=2022-01-01"   >> $GITHUB_ENV
          else
            echo "START=2022-01-01" >> $GITHUB_ENV
            echo "END=$(date -I -d 'yesterday')" >> $GITHUB_ENV
          fi

      - name: üåê Download metrics JSONs
        run: |
          ./metrics/download_metrics_range.sh \
            "${{ matrix.metric }}" \
            "$START" \
            "$END" \
            "${{ matrix.part }}"

      - name: üîç Test sample JSON for errors
        run: |
          SAMPLE="metrics/${{ matrix.part }}/${{ matrix.metric }}/BTCUSDT_${START}.json"
          if jq -e '.error' "$SAMPLE" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è API returned error in $SAMPLE ‚Äì skipping commit."
            exit 0
          else
            echo "‚úÖ Sample JSON OK."
          fi

      - name: üîÑ Commit & Push JSON into repo
        run: |
          # configure git
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 1) stash everything (chmod + script changes etc)
          git stash push --include-untracked -m "pre-rebase stash"

          # 2) bring local main up to date
          git fetch origin main
          git rebase origin/main

          # 3) reapply stashed changes (JSON + script)
          git stash pop --index || true

          # 4) stage only the freshly downloaded JSONs
          git add -A metrics/${{ matrix.part }}/${{ matrix.metric }}

          # 5) commit & push if there is anything new
          if ! git diff --cached --quiet; then
            git commit -m "feat(metrics): add ${{ matrix.metric }} part=${{ matrix.part }} up to $(date -I) [skip ci]"
            git push origin HEAD:main
          else
            echo "‚Üí No new ${ matrix.metric } for ${{ matrix.part }}"
          fi
