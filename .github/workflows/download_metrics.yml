name: üìä Download 4yr Metrics (6 Jobs)

on:
  workflow_dispatch:

jobs:
  download:
    name: üîÑ ${{ matrix.metric }} ‚û°Ô∏è ${{ matrix.part }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        metric:
          - open_interest
          - funding_rate
          - liquidity
        part:
          - part1
          - part2

    steps:
      # 1) Volles Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) Git-User
      - name: Configure Git user
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 3) WORKER_URL ins ENV
      - name: Set WORKER_URL
        run: echo "WORKER_URL=${{ secrets.METRICS_WORKER_URL }}" >> $GITHUB_ENV

      # 4) Script ausf√ºhrbar machen
      - name: Make script executable
        run: chmod +x metrics/download_metrics_range.sh

      # 5) Datumsspanne berechnen
      - name: Compute date range for ${{ matrix.part }}
        run: |
          if [ "${{ matrix.part }}" = "part1" ]; then
            echo "START=2020-01-01" >> $GITHUB_ENV
            echo "END=2022-01-01"   >> $GITHUB_ENV
          else
            echo "START=2022-01-01"                     >> $GITHUB_ENV
            echo "END=$(date -I -d "yesterday")"        >> $GITHUB_ENV
          fi

      # 6) Alte JSONs l√∂schen, damit wir wirklich alles neu holen
      - name: Clear old JSONs
        run: |
          TARGET="metrics/${{ matrix.part }}/${{ matrix.metric }}"
          rm -rf "$TARGET"
          mkdir -p "$TARGET"

      # 7) Download aller JSONs f√ºr genau diese Metrik
      - name: Download metrics JSONs
        run: |
          ./metrics/download_metrics_range.sh \
            "${{ matrix.metric }}" \
            "$START" \
            "$END" \
            "${{ matrix.part }}"

      # 8) Smoke-Test einer Beispiel-Datei
      - name: Verify a sample JSON
        run: |
          SAMPLE="metrics/${{ matrix.part }}/${{ matrix.metric }}/BTCUSDT_${START}.json"
          if jq -e '.error' "$SAMPLE" >/dev/null; then
            echo "‚ùå API liefert error-Feld in $SAMPLE"
            exit 1
          else
            echo "‚úÖ Sample JSON OK."
          fi

      # 9) Commit & Push
      - name: Commit & Push JSON into repo
        run: |
          git stash push --include-untracked -m "pre-pull stash"
          git fetch origin main
          git rebase origin/main
          git stash pop

          git add -A metrics/${{ matrix.part }}/${{ matrix.metric }}

          if ! git diff --cached --quiet; then
            git commit -m "feat(metrics): overwrite ${{ matrix.metric }} part=${{ matrix.part }} up to $(date -I) [skip ci]"
            git push origin HEAD:main
          else
            echo "‚Üí No new JSONs for ${{ matrix.metric }} / ${{ matrix.part }}"
          fi
