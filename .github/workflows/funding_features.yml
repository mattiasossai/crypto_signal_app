# .github/workflows/funding_features.yml
name: Extract Funding Features

on:
  workflow_dispatch:

jobs:
  extract:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        symbol: [BTCUSDT, ETHUSDT, BNBUSDT, XRPUSDT, SOLUSDT, ENAUSDT]

    steps:
      - name: Repo auschecken
        uses: actions/checkout@v3
        with:
          persist-credentials: true

      - name: Python einrichten
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Abhängigkeiten installieren
        run: pip install -r train/requirements.txt

      - name: Funding- & Premium-Index-Daten herunterladen
        shell: bash
        run: |
          BASE_F="https://data.binance.vision/data/futures/um/monthly/fundingRate"
          BASE_P="https://data.binance.vision/data/futures/um/monthly/premiumIndexKlines"
          SYM=${{ matrix.symbol }}
          mkdir -p data/futures/um/monthly/fundingRate/$SYM
          mkdir -p data/futures/um/monthly/premiumIndexKlines/$SYM/1h

          # Inception
          case "$SYM" in
            BTCUSDT|ETHUSDT|XRPUSDT) START="2020-01" ;;
            BNBUSDT)               START="2020-02" ;;
            SOLUSDT)               START="2020-09" ;;
            ENAUSDT)               START="2024-04" ;;
          esac

          # letzter voller Monat
          LAST_FULL=$(date -d "$(date +%Y-%m-01) -1 day" "+%Y-%m")

          # 1) Funding-Rate ZIPs
          PER=$START
          while [[ "$PER" <= "$LAST_FULL" ]]; do
            ZF="$SYM-fundingRate-$PER.zip"
            UF="$BASE_F/$SYM/$ZF"
            echo "→ Funding $ZF"
            if curl -sSf "$UF" -o tmp.zip; then
              unzip -p tmp.zip > data/futures/um/monthly/fundingRate/$SYM/${ZF%.zip}.csv
              rm tmp.zip
            fi
            PER=$(date -d "$PER-01 +1 month" "+%Y-%m")
          done

          # 2) Premium-Index ZIPs
          PER=$START
          while [[ "$PER" <= "$LAST_FULL" ]]; do
            ZP="$SYM-1h-$PER.zip"
            UP="$BASE_P/$SYM/1h/$ZP"
            echo "→ Premium $ZP"
            if curl -sSf "$UP" -o tmp.zip; then
              unzip -p tmp.zip > data/futures/um/monthly/premiumIndexKlines/$SYM/1h/${ZP%.zip}.csv
              rm tmp.zip
            fi
            PER=$(date -d "$PER-01 +1 month" "+%Y-%m")
          done

      - name: Funding-Extraktor ausführen
        env:
          SYMBOL: ${{ matrix.symbol }}
        run: python extract_funding_features.py

      - name: Smoke Test
        shell: bash
        run: |
          python - <<'EOF'
          import pandas as pd
          fn = f"features/funding/${{ matrix.symbol }}-funding-features.parquet"
          df = pd.read_parquet(fn)
          req = ["fundingRate_8h","sma7d","zscore","flip","basis"]
          miss = [c for c in req if c not in df.columns]
          if miss:
            print("Fehlende Spalten:", miss); exit(1)
          # Basis jetzt gefüllt, also darf keine Spalte komplett NaN sein
          if df[req].isna().all().any():
            print("Spalten komplett NaN"); exit(1)
          print("OK")
          EOF

      - name: Commit & Push (konfliktfrei)
        if: success()
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull --rebase --autostash
          git add features/funding/${{ matrix.symbol }}-funding-features.parquet
          if ! git diff --cached --quiet; then
            git commit -m "chore(funding): update ${{ matrix.symbol }}"
            git push
          else
            echo "Keine Änderungen für ${{ matrix.symbol }}"
          fi
